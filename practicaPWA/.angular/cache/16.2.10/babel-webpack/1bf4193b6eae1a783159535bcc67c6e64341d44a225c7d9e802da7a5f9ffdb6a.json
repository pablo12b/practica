{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport class NotasFirebaseService {\n  constructor(db) {\n    this.db = db;\n    this.path = 'notas';\n    this.notasRef = db.collection(this.path);\n    this.notasRef.valueChanges().subscribe(data => {\n      console.log(data);\n    });\n  }\n  getAll() {\n    return this.notasRef.valueChanges();\n  }\n  ngOnInit() {\n    // Lógica para obtener la nota existente desde Firestore (asígnala a this.nota)\n    // Puedes usar el ID del documento o cualquier otro criterio para obtener el documento específico\n    this.db.collection('tuColeccion').doc('idDelDocumento').valueChanges().subscribe(data => {\n      this.nota = data;\n      // Asegúrate de asignar los valores actuales al formulario al iniciar\n      this.formulario.patchValue({\n        nota: this.nota.nota,\n        fecha: this.nota.fecha,\n        etiqueta: this.nota.etiqueta\n      });\n    });\n  }\n  eliminarCampo(uid) {\n    this.db.doc(this.path + '/' + uid).delete().then(() => {\n      console.log('Campo eliminado correctamente');\n    }).catch(error => {\n      console.error('Error al eliminar campo:', error);\n    });\n  }\n  save(nota) {\n    const uid = nota.etiqueta;\n    console.log('Nota', nota);\n    return this.notasRef.doc(uid).set(Object.assign({}, nota));\n  }\n  getNota(uid) {\n    console.log(\"uid\", uid);\n    return this.db.doc(this.path + '/' + uid).valueChanges();\n  }\n  static #_ = this.ɵfac = function NotasFirebaseService_Factory(t) {\n    return new (t || NotasFirebaseService)(i0.ɵɵinject(i1.AngularFirestore));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotasFirebaseService,\n    factory: NotasFirebaseService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["NotasFirebaseService","constructor","db","path","notasRef","collection","valueChanges","subscribe","data","console","log","getAll","ngOnInit","doc","nota","formulario","patchValue","fecha","etiqueta","eliminarCampo","uid","delete","then","catch","error","save","set","Object","assign","getNota","_","i0","ɵɵinject","i1","AngularFirestore","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ROG ZEPHYRUS\\Documents\\GitHub\\practica\\practicaPWA\\src\\app\\pages\\services\\notas-firebase.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/compat/firestore'\nimport { Nota } from '../domain/nota';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotasFirebaseService {\n\n  private path = 'notas'\n\n  notasRef: AngularFirestoreCollection<any>\n\n  constructor(private db: AngularFirestore) { \n    this.notasRef = db.collection(this.path)\n\n    this.notasRef.valueChanges().subscribe(data => {\n      console.log(data)\n    })\n  }\n\n  getAll(){\n    return this.notasRef.valueChanges()\n  }\n\n  ngOnInit() {\n    // Lógica para obtener la nota existente desde Firestore (asígnala a this.nota)\n    // Puedes usar el ID del documento o cualquier otro criterio para obtener el documento específico\n    this.db.collection('tuColeccion').doc('idDelDocumento').valueChanges().subscribe((data: any) => {\n      this.nota = data;\n      // Asegúrate de asignar los valores actuales al formulario al iniciar\n      this.formulario.patchValue({\n        nota: this.nota.nota,\n        fecha: this.nota.fecha,\n        etiqueta: this.nota.etiqueta\n      });\n    });\n  }\n\n  eliminarCampo(uid: string) {\n    this.db.doc(this.path+'/'+uid).delete()\n      .then(() => {\n        console.log('Campo eliminado correctamente');\n      })\n      .catch(error => {\n        console.error('Error al eliminar campo:', error);\n      });\n  }\n\n  save(nota: Nota){\n    const uid = nota.etiqueta\n    console.log('Nota', nota)\n    return this.notasRef.doc(uid).set(Object.assign({}, nota))\n  }\n\n  getNota(uid:string){\n    console.log(\"uid\", uid)\n    return this.db.doc(this.path+'/'+uid).valueChanges()\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,oBAAoB;EAM/BC,YAAoBC,EAAoB;IAApB,KAAAA,EAAE,GAAFA,EAAE;IAJd,KAAAC,IAAI,GAAG,OAAO;IAKpB,IAAI,CAACC,QAAQ,GAAGF,EAAE,CAACG,UAAU,CAAC,IAAI,CAACF,IAAI,CAAC;IAExC,IAAI,CAACC,QAAQ,CAACE,YAAY,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MAC5CC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACnB,CAAC,CAAC;EACJ;EAEAG,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACP,QAAQ,CAACE,YAAY,EAAE;EACrC;EAEAM,QAAQA,CAAA;IACN;IACA;IACA,IAAI,CAACV,EAAE,CAACG,UAAU,CAAC,aAAa,CAAC,CAACQ,GAAG,CAAC,gBAAgB,CAAC,CAACP,YAAY,EAAE,CAACC,SAAS,CAAEC,IAAS,IAAI;MAC7F,IAAI,CAACM,IAAI,GAAGN,IAAI;MAChB;MACA,IAAI,CAACO,UAAU,CAACC,UAAU,CAAC;QACzBF,IAAI,EAAE,IAAI,CAACA,IAAI,CAACA,IAAI;QACpBG,KAAK,EAAE,IAAI,CAACH,IAAI,CAACG,KAAK;QACtBC,QAAQ,EAAE,IAAI,CAACJ,IAAI,CAACI;OACrB,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAC,aAAaA,CAACC,GAAW;IACvB,IAAI,CAAClB,EAAE,CAACW,GAAG,CAAC,IAAI,CAACV,IAAI,GAAC,GAAG,GAACiB,GAAG,CAAC,CAACC,MAAM,EAAE,CACpCC,IAAI,CAAC,MAAK;MACTb,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC9C,CAAC,CAAC,CACDa,KAAK,CAACC,KAAK,IAAG;MACbf,OAAO,CAACe,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CAAC;EACN;EAEAC,IAAIA,CAACX,IAAU;IACb,MAAMM,GAAG,GAAGN,IAAI,CAACI,QAAQ;IACzBT,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEI,IAAI,CAAC;IACzB,OAAO,IAAI,CAACV,QAAQ,CAACS,GAAG,CAACO,GAAG,CAAC,CAACM,GAAG,CAACC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEd,IAAI,CAAC,CAAC;EAC5D;EAEAe,OAAOA,CAACT,GAAU;IAChBX,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEU,GAAG,CAAC;IACvB,OAAO,IAAI,CAAClB,EAAE,CAACW,GAAG,CAAC,IAAI,CAACV,IAAI,GAAC,GAAG,GAACiB,GAAG,CAAC,CAACd,YAAY,EAAE;EACtD;EAAC,QAAAwB,CAAA,G;qBAnDU9B,oBAAoB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAApBnC,oBAAoB;IAAAoC,OAAA,EAApBpC,oBAAoB,CAAAqC,IAAA;IAAAC,UAAA,EAFnB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}