{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let EditarComponent = class EditarComponent {\n  constructor(fb, router, route, db, notasFirebaseService) {\n    this.fb = fb;\n    this.router = router;\n    this.route = route;\n    this.db = db;\n    this.notasFirebaseService = notasFirebaseService;\n    this.route.params.subscribe(params => {\n      console.log(params);\n      if (params['etiqueta']) {\n        this.loadPersona(params['etiqueta']);\n      }\n    });\n    this.formulario = this.fb.group({\n      nota: ['', Validators.required],\n      fecha: ['', Validators.required],\n      etiqueta: ['', Validators.required]\n    });\n  }\n  loadPersona(uid) {\n    this.notasFirebaseService.getNota(uid).subscribe(data => {\n      console.log(data);\n      this.nota = data;\n    });\n  }\n  ngOnInit() {\n    // Lógica para obtener la nota existente desde Firestore (asígnala a this.nota)\n    // Puedes usar el ID del documento o cualquier otro criterio para obtener el documento específico\n    this.afs.collection('tuColeccion').doc('idDelDocumento').valueChanges().subscribe(data => {\n      this.nota = data;\n      // Asegúrate de asignar los valores actuales al formulario al iniciar\n      this.formulario.patchValue({\n        nota: this.nota.nota,\n        fecha: this.nota.fecha,\n        etiqueta: this.nota.etiqueta\n      });\n    });\n  }\n  guardarEdicion() {\n    // Obtén los nuevos valores desde el formulario\n    const nuevaNota = this.formulario.get('nota').value;\n    const nuevaFecha = this.formulario.get('fecha').value;\n    const nuevaEtiqueta = this.formulario.get('etiqueta').value;\n    // Actualiza el documento en Firestore\n    this.afs.collection('tuColeccion').doc('idDelDocumento').update({\n      nota: nuevaNota,\n      fecha: nuevaFecha,\n      etiqueta: nuevaEtiqueta\n    }).then(() => {\n      console.log('Documento actualizado correctamente.');\n    }).catch(error => {\n      console.error('Error al actualizar el documento:', error);\n    });\n  }\n};\nEditarComponent = __decorate([Component({\n  selector: 'app-editar',\n  templateUrl: './editar.component.html',\n  styleUrls: ['./editar.component.css']\n})], EditarComponent);","map":{"version":3,"names":["Component","Validators","EditarComponent","constructor","fb","router","route","db","notasFirebaseService","params","subscribe","console","log","loadPersona","formulario","group","nota","required","fecha","etiqueta","uid","getNota","data","ngOnInit","afs","collection","doc","valueChanges","patchValue","guardarEdicion","nuevaNota","get","value","nuevaFecha","nuevaEtiqueta","update","then","catch","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ROG ZEPHYRUS\\Documents\\GitHub\\practica\\practicaPWA\\src\\app\\pages\\editar\\editar.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Nota } from '../domain/nota';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotasFirebaseService } from '../services/notas-firebase.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-editar',\n  templateUrl: './editar.component.html',\n  styleUrls: ['./editar.component.css']\n})\nexport class EditarComponent implements OnInit {\n  nota: any;\n  formulario: FormGroup;\n  \n\n  constructor(private fb: FormBuilder,  private router: Router, \n      private route: ActivatedRoute, private db: AngularFirestore,\n      private notasFirebaseService: NotasFirebaseService){\n        \n        this.route.params.subscribe(params => {\n          console.log(params)\n          if(params['etiqueta']){\n            this.loadPersona(params['etiqueta'])\n          }\n        })\n        this.formulario = this.fb.group({\n          nota: ['', Validators.required],\n          fecha: ['', Validators.required],\n          etiqueta: ['', Validators.required]\n        });\n  }\n\n  loadPersona(uid: string) {\n    this.notasFirebaseService.getNota(uid).subscribe(data => {\n      console.log(data)\n      this.nota = <any> data\n    })\n  }\n\n  ngOnInit() {\n    // Lógica para obtener la nota existente desde Firestore (asígnala a this.nota)\n    // Puedes usar el ID del documento o cualquier otro criterio para obtener el documento específico\n    this.afs.collection('tuColeccion').doc('idDelDocumento').valueChanges().subscribe((data: any) => {\n      this.nota = data;\n      // Asegúrate de asignar los valores actuales al formulario al iniciar\n      this.formulario.patchValue({\n        nota: this.nota.nota,\n        fecha: this.nota.fecha,\n        etiqueta: this.nota.etiqueta\n      });\n    });\n  }\n\n  guardarEdicion() {\n    // Obtén los nuevos valores desde el formulario\n    const nuevaNota = this.formulario.get('nota').value;\n    const nuevaFecha = this.formulario.get('fecha').value;\n    const nuevaEtiqueta = this.formulario.get('etiqueta').value;\n\n    // Actualiza el documento en Firestore\n    this.afs.collection('tuColeccion').doc('idDelDocumento').update({\n      nota: nuevaNota,\n      fecha: nuevaFecha,\n      etiqueta: nuevaEtiqueta\n    }).then(() => {\n      console.log('Documento actualizado correctamente.');\n    }).catch(error => {\n      console.error('Error al actualizar el documento:', error);\n    });\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}