{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class NotasService {\n  constructor() {\n    this.notas = [];\n  }\n  agregarReceta(nota) {\n    this.notas.push(nota);\n  }\n  obtenerNotas() {\n    return this.notas;\n  }\n  borrarNota(nombreNota) {\n    // Obtener las notas actuales desde localStorage\n    const notasString = localStorage.getItem('notas');\n    // Verificar si hay notas en localStorage\n    if (notasString) {\n      // Parsear las notas a un objeto\n      const notas = JSON.parse(notasString);\n      // Verificar si la nota que deseas borrar existe\n      if (notas.hasOwnProperty(nombreNota)) {\n        // Borrar la nota específica\n        delete notas[nombreNota];\n        // Convertir el objeto de notas a una cadena y almacenarlo nuevamente\n        localStorage.setItem('notas', JSON.stringify(notas));\n        console.log(`La nota '${nombreNota}' ha sido borrada correctamente.`);\n      } else {\n        console.log(`No se encontró la nota '${nombreNota}'.`);\n      }\n    } else {\n      console.log('No hay notas almacenadas en localStorage.');\n    }\n  }\n  static #_ = this.ɵfac = function NotasService_Factory(t) {\n    return new (t || NotasService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotasService,\n    factory: NotasService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["NotasService","constructor","notas","agregarReceta","nota","push","obtenerNotas","borrarNota","nombreNota","notasString","localStorage","getItem","JSON","parse","hasOwnProperty","setItem","stringify","console","log","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ROG ZEPHYRUS\\Documents\\GitHub\\practica\\practicaPWA\\src\\app\\pages\\services\\notas.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Nota } from '../domain/nota';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class  NotasService {\n  notas: Nota[] = [];\n\n  agregarReceta(nota: Nota) {\n    this.notas.push(nota);\n  }\n\n  obtenerNotas() {\n    return this.notas\n  }\n\n  borrarNota(nombreNota: string) {\n    // Obtener las notas actuales desde localStorage\n    const notasString = localStorage.getItem('notas');\n  \n    // Verificar si hay notas en localStorage\n    if (notasString) {\n      // Parsear las notas a un objeto\n      const notas: { [key: string]: string } = JSON.parse(notasString);\n  \n      // Verificar si la nota que deseas borrar existe\n      if (notas.hasOwnProperty(nombreNota)) {\n        // Borrar la nota específica\n        delete notas[nombreNota];\n  \n        // Convertir el objeto de notas a una cadena y almacenarlo nuevamente\n        localStorage.setItem('notas', JSON.stringify(notas));\n  \n        console.log(`La nota '${nombreNota}' ha sido borrada correctamente.`);\n      } else {\n        console.log(`No se encontró la nota '${nombreNota}'.`);\n      }\n    } else {\n      console.log('No hay notas almacenadas en localStorage.');\n    }\n  }\n  \n}\n"],"mappings":";AAMA,OAAM,MAAQA,YAAY;EAH1BC,YAAA;IAIE,KAAAC,KAAK,GAAW,EAAE;;EAElBC,aAAaA,CAACC,IAAU;IACtB,IAAI,CAACF,KAAK,CAACG,IAAI,CAACD,IAAI,CAAC;EACvB;EAEAE,YAAYA,CAAA;IACV,OAAO,IAAI,CAACJ,KAAK;EACnB;EAEAK,UAAUA,CAACC,UAAkB;IAC3B;IACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAEjD;IACA,IAAIF,WAAW,EAAE;MACf;MACA,MAAMP,KAAK,GAA8BU,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;MAEhE;MACA,IAAIP,KAAK,CAACY,cAAc,CAACN,UAAU,CAAC,EAAE;QACpC;QACA,OAAON,KAAK,CAACM,UAAU,CAAC;QAExB;QACAE,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAACd,KAAK,CAAC,CAAC;QAEpDe,OAAO,CAACC,GAAG,CAAC,YAAYV,UAAU,kCAAkC,CAAC;OACtE,MAAM;QACLS,OAAO,CAACC,GAAG,CAAC,2BAA2BV,UAAU,IAAI,CAAC;;KAEzD,MAAM;MACLS,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;;EAE5D;EAAC,QAAAC,CAAA,G;qBAnCWnB,YAAY;EAAA;EAAA,QAAAoB,EAAA,G;WAAZpB,YAAY;IAAAqB,OAAA,EAAZrB,YAAY,CAAAsB,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}