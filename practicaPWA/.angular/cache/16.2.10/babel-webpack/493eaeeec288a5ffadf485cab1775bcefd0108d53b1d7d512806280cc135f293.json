{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Nota } from '../domain/nota';\nimport { Validators } from '@angular/forms';\nexport let EditarComponent = class EditarComponent {\n  constructor(fb, db, router, route, notasFirebaseService) {\n    this.fb = fb;\n    this.db = db;\n    this.router = router;\n    this.route = route;\n    this.notasFirebaseService = notasFirebaseService;\n    this.nota = new Nota();\n    this.route.params.subscribe(params => {\n      console.log(params);\n      if (params['etiqueta']) {\n        this.loadPersona(params['etiqueta']);\n      }\n    });\n    this.formulario = this.fb.group({\n      nota: ['', Validators.required],\n      fecha: ['', Validators.required],\n      etiqueta: ['', Validators.required]\n    });\n  }\n  loadPersona(uid) {\n    this.notasFirebaseService.getNota(uid).subscribe(data => {\n      console.log(data);\n      this.nota = data;\n    });\n  }\n  ngOnInit() {\n    // Lógica para obtener la nota existente desde Firestore (asígnala a this.nota)\n    // Puedes usar el ID del documento o cualquier otro criterio para obtener el documento específico\n    this.db.collection('tuColeccion').doc('idDelDocumento').valueChanges().subscribe(data => {\n      this.nota = data;\n      // Asegúrate de asignar los valores actuales al formulario al iniciar\n      this.formulario.patchValue({\n        nota: this.nota.nota,\n        fecha: this.nota.fecha,\n        etiqueta: this.nota.etiqueta\n      });\n    });\n  }\n};\nEditarComponent = __decorate([Component({\n  selector: 'app-editar',\n  templateUrl: './editar.component.html',\n  styleUrls: ['./editar.component.css']\n})], EditarComponent);","map":{"version":3,"names":["Component","Nota","Validators","EditarComponent","constructor","fb","db","router","route","notasFirebaseService","nota","params","subscribe","console","log","loadPersona","formulario","group","required","fecha","etiqueta","uid","getNota","data","ngOnInit","collection","doc","valueChanges","patchValue","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ROG ZEPHYRUS\\Documents\\GitHub\\practica\\practicaPWA\\src\\app\\pages\\editar\\editar.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Nota } from '../domain/nota';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotasFirebaseService } from '../services/notas-firebase.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-editar',\n  templateUrl: './editar.component.html',\n  styleUrls: ['./editar.component.css']\n})\nexport class EditarComponent implements On {\n  nota: Nota = new Nota();\n  formulario: FormGroup;\n\n  constructor(private fb: FormBuilder, private db: AngularFirestore, private router: Router, \n      private route: ActivatedRoute,\n      private notasFirebaseService: NotasFirebaseService){\n        \n        this.route.params.subscribe(params => {\n          console.log(params)\n          if(params['etiqueta']){\n            this.loadPersona(params['etiqueta'])\n          }\n        })\n        this.formulario = this.fb.group({\n          nota: ['', Validators.required],\n          fecha: ['', Validators.required],\n          etiqueta: ['', Validators.required]\n        });\n  }\n\n  loadPersona(uid: string) {\n    this.notasFirebaseService.getNota(uid).subscribe(data => {\n      console.log(data)\n      this.nota = <any> data\n    })\n  }\n\n  ngOnInit() {\n    // Lógica para obtener la nota existente desde Firestore (asígnala a this.nota)\n    // Puedes usar el ID del documento o cualquier otro criterio para obtener el documento específico\n    this.db.collection('tuColeccion').doc('idDelDocumento').valueChanges().subscribe((data: any) => {\n      this.nota = data;\n      // Asegúrate de asignar los valores actuales al formulario al iniciar\n      this.formulario.patchValue({\n        nota: this.nota.nota,\n        fecha: this.nota.fecha,\n        etiqueta: this.nota.etiqueta\n      });\n    });\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,IAAI,QAAQ,gBAAgB;AAGrC,SAAiCC,UAAU,QAAQ,gBAAgB;AAO5D,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAI1BC,YAAoBC,EAAe,EAAUC,EAAoB,EAAUC,MAAc,EAC7EC,KAAqB,EACrBC,oBAA0C;IAFlC,KAAAJ,EAAE,GAAFA,EAAE;IAAuB,KAAAC,EAAE,GAAFA,EAAE;IAA4B,KAAAC,MAAM,GAANA,MAAM;IACrE,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,oBAAoB,GAApBA,oBAAoB;IALhC,KAAAC,IAAI,GAAS,IAAIT,IAAI,EAAE;IAOjB,IAAI,CAACO,KAAK,CAACG,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACnCE,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;MACnB,IAAGA,MAAM,CAAC,UAAU,CAAC,EAAC;QACpB,IAAI,CAACI,WAAW,CAACJ,MAAM,CAAC,UAAU,CAAC,CAAC;;IAExC,CAAC,CAAC;IACF,IAAI,CAACK,UAAU,GAAG,IAAI,CAACX,EAAE,CAACY,KAAK,CAAC;MAC9BP,IAAI,EAAE,CAAC,EAAE,EAAER,UAAU,CAACgB,QAAQ,CAAC;MAC/BC,KAAK,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACgB,QAAQ,CAAC;MAChCE,QAAQ,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACgB,QAAQ;KACnC,CAAC;EACR;EAEAH,WAAWA,CAACM,GAAW;IACrB,IAAI,CAACZ,oBAAoB,CAACa,OAAO,CAACD,GAAG,CAAC,CAACT,SAAS,CAACW,IAAI,IAAG;MACtDV,OAAO,CAACC,GAAG,CAACS,IAAI,CAAC;MACjB,IAAI,CAACb,IAAI,GAASa,IAAI;IACxB,CAAC,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN;IACA;IACA,IAAI,CAAClB,EAAE,CAACmB,UAAU,CAAC,aAAa,CAAC,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAACC,YAAY,EAAE,CAACf,SAAS,CAAEW,IAAS,IAAI;MAC7F,IAAI,CAACb,IAAI,GAAGa,IAAI;MAChB;MACA,IAAI,CAACP,UAAU,CAACY,UAAU,CAAC;QACzBlB,IAAI,EAAE,IAAI,CAACA,IAAI,CAACA,IAAI;QACpBS,KAAK,EAAE,IAAI,CAACT,IAAI,CAACS,KAAK;QACtBC,QAAQ,EAAE,IAAI,CAACV,IAAI,CAACU;OACrB,CAAC;IACJ,CAAC,CAAC;EACJ;CAED;AA1CYjB,eAAe,GAAA0B,UAAA,EAL3B7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACW7B,eAAe,CA0C3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}